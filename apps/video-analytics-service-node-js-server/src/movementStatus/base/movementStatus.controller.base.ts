/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MovementStatusService } from "../movementStatus.service";
import { MovementStatusCreateInput } from "./MovementStatusCreateInput";
import { MovementStatus } from "./MovementStatus";
import { MovementStatusFindManyArgs } from "./MovementStatusFindManyArgs";
import { MovementStatusWhereUniqueInput } from "./MovementStatusWhereUniqueInput";
import { MovementStatusUpdateInput } from "./MovementStatusUpdateInput";

export class MovementStatusControllerBase {
  constructor(protected readonly service: MovementStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MovementStatus })
  async createMovementStatus(
    @common.Body() data: MovementStatusCreateInput
  ): Promise<MovementStatus> {
    return await this.service.createMovementStatus({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MovementStatus] })
  @ApiNestedQuery(MovementStatusFindManyArgs)
  async movementStatuses(
    @common.Req() request: Request
  ): Promise<MovementStatus[]> {
    const args = plainToClass(MovementStatusFindManyArgs, request.query);
    return this.service.movementStatuses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MovementStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async movementStatus(
    @common.Param() params: MovementStatusWhereUniqueInput
  ): Promise<MovementStatus | null> {
    const result = await this.service.movementStatus({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MovementStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMovementStatus(
    @common.Param() params: MovementStatusWhereUniqueInput,
    @common.Body() data: MovementStatusUpdateInput
  ): Promise<MovementStatus | null> {
    try {
      return await this.service.updateMovementStatus({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MovementStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMovementStatus(
    @common.Param() params: MovementStatusWhereUniqueInput
  ): Promise<MovementStatus | null> {
    try {
      return await this.service.deleteMovementStatus({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
