/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TextDetectionService } from "../textDetection.service";
import { TextDetectionCreateInput } from "./TextDetectionCreateInput";
import { TextDetection } from "./TextDetection";
import { TextDetectionFindManyArgs } from "./TextDetectionFindManyArgs";
import { TextDetectionWhereUniqueInput } from "./TextDetectionWhereUniqueInput";
import { TextDetectionUpdateInput } from "./TextDetectionUpdateInput";

export class TextDetectionControllerBase {
  constructor(protected readonly service: TextDetectionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TextDetection })
  async createTextDetection(
    @common.Body() data: TextDetectionCreateInput
  ): Promise<TextDetection> {
    return await this.service.createTextDetection({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TextDetection] })
  @ApiNestedQuery(TextDetectionFindManyArgs)
  async textDetections(
    @common.Req() request: Request
  ): Promise<TextDetection[]> {
    const args = plainToClass(TextDetectionFindManyArgs, request.query);
    return this.service.textDetections({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TextDetection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async textDetection(
    @common.Param() params: TextDetectionWhereUniqueInput
  ): Promise<TextDetection | null> {
    const result = await this.service.textDetection({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TextDetection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTextDetection(
    @common.Param() params: TextDetectionWhereUniqueInput,
    @common.Body() data: TextDetectionUpdateInput
  ): Promise<TextDetection | null> {
    try {
      return await this.service.updateTextDetection({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TextDetection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTextDetection(
    @common.Param() params: TextDetectionWhereUniqueInput
  ): Promise<TextDetection | null> {
    try {
      return await this.service.deleteTextDetection({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
