/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DetectedObjectService } from "../detectedObject.service";
import { DetectedObjectCreateInput } from "./DetectedObjectCreateInput";
import { DetectedObject } from "./DetectedObject";
import { DetectedObjectFindManyArgs } from "./DetectedObjectFindManyArgs";
import { DetectedObjectWhereUniqueInput } from "./DetectedObjectWhereUniqueInput";
import { DetectedObjectUpdateInput } from "./DetectedObjectUpdateInput";

export class DetectedObjectControllerBase {
  constructor(protected readonly service: DetectedObjectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DetectedObject })
  async createDetectedObject(
    @common.Body() data: DetectedObjectCreateInput
  ): Promise<DetectedObject> {
    return await this.service.createDetectedObject({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DetectedObject] })
  @ApiNestedQuery(DetectedObjectFindManyArgs)
  async detectedObjects(
    @common.Req() request: Request
  ): Promise<DetectedObject[]> {
    const args = plainToClass(DetectedObjectFindManyArgs, request.query);
    return this.service.detectedObjects({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DetectedObject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async detectedObject(
    @common.Param() params: DetectedObjectWhereUniqueInput
  ): Promise<DetectedObject | null> {
    const result = await this.service.detectedObject({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DetectedObject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDetectedObject(
    @common.Param() params: DetectedObjectWhereUniqueInput,
    @common.Body() data: DetectedObjectUpdateInput
  ): Promise<DetectedObject | null> {
    try {
      return await this.service.updateDetectedObject({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DetectedObject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDetectedObject(
    @common.Param() params: DetectedObjectWhereUniqueInput
  ): Promise<DetectedObject | null> {
    try {
      return await this.service.deleteDetectedObject({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
